---
# This is required to force the job to re-run
# Job manifests must be used since thats what upstream uses,
# and I don't want to manually maintain equivalent pod definitions
- name: Delete the kube-bench job definitions from the server
  kubernetes.core.k8s:
    state: absent
    namespace: default
    definition: "{{ lookup('template', 'templates/' + item + '.j2') | from_yaml }}"
  loop: "{{ kube_bench_manifests_to_apply }}"

- name: Apply the kube-bench job definitions to the server
  kubernetes.core.k8s:
    state: present
    namespace: default
    definition: "{{ lookup('template', 'templates/' + item + '.j2') | from_yaml }}"
  loop: "{{ kube_bench_manifests_to_apply }}"

- name: Wait for the kube-bench jobs to complete
  kubernetes.core.k8s_info:
    api_version: batch/v1
    kind: Job
    name: "kube-bench-{{ item }}"
    namespace: default
    wait: true
    wait_condition:
      type: Complete
      status: "True"
    wait_timeout: 300
  register: kube_bench_jobs
  loop: "{{ kube_bench_manifests_to_apply }}"

- name: Get pods created by kube-bench jobs
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    namespace: default
    label_selectors: "job-name=kube-bench-{{ item }}"
  register: kube_bench_pods
  loop: "{{ kube_bench_manifests_to_apply }}"

- name: Get logs from kube-bench pods
  no_log: "{{ kube_bench_misc_no_log }}"
  kubernetes.core.k8s_log:
    api_version: v1
    kind: Pod
    name: "{{ item.resources[0].metadata.name }}"
    namespace: default
    container: kube-bench
  register: kube_bench_logs
  when: item.resources | length > 0
  loop: "{{ kube_bench_pods.results }}"

- name: Generate kube-bench results
  no_log: "{{ kube_bench_misc_no_log }}"
  ansible.builtin.set_fact:
    kube_bench_results: "{{ (kube_bench_results | default([])) + [result] }}"
  vars:
    result: |
      ==========================================
      KUBE-BENCH SCAN RESULTS -- VERSION {{ kube_bench_version }}
      ==========================================
      {{ item.log }}
  when: item is defined and item.log is defined
  loop: "{{ kube_bench_logs.results }}"

- name: Display kube-bench results
  ansible.builtin.debug:
    msg: "{{ kube_bench_results | join('\n\n') }}"

- name: Check if any jobs failed
  no_log: "{{ kube_bench_misc_no_log }}"
  ansible.builtin.debug:
    msg: "WARNING: A kube-bench job may have failed or is still running"
  when: >
    item.resources[0].status.conditions is defined and
    (item.resources[0].status.conditions | selectattr('type', 'equalto', 'Failed') | list | length > 0)
  loop: "{{ kube_bench_jobs.results }}"

- name: Delete the kube-bench job definitions from the server
  kubernetes.core.k8s:
    state: absent
    namespace: default
    definition: "{{ lookup('template', 'templates/' + item + '.j2') | from_yaml }}"
  loop: "{{ kube_bench_manifests_to_apply }}"

- name: Delete kube-bench pods
  no_log: "{{ kube_bench_misc_no_log }}"
  kubernetes.core.k8s:
    state: absent
    api_version: v1
    kind: Pod
    name: "{{ item.resources[0].metadata.name }}"
    namespace: default
  when: item.resources is defined
  loop: "{{ kube_bench_pods.results }}"

- name: Check for failing security tests in kube-bench logs
  ansible.builtin.fail:
    msg: "CIS Kubernetes Benchmark Failed: kube-bench scan found failing security tests. Review the logs above for details."
  when:
    - kube_bench_results is defined
    - kube_bench_results | join('\n\n') | regex_search('[1-9][0-9]* checks FAIL')
    - kube_bench_fail_on_failing_tests
